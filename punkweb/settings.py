"""
Django settings for punkweb project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from django.contrib import admin
from django.utils.log import DEFAULT_LOGGING

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "360wd#k-r^(p)o*86&yw00&^z#x!eoozkq=bn@r!4da7bfnodf"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.humanize",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    # Punkweb boards
    "django_extensions",
    "compressor",
    "easy_thumbnails",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "precise_bbcode",
    "captcha",
    "punkweb_boards",
    # Punkweb
    "apps.music",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "punkweb_boards.middleware.ActiveUserMiddleware",
]

ROOT_URLCONF = "punkweb.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "punkweb/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "punkweb_boards.context_processors.settings",
                "punkweb_boards.context_processors.base_context",
            ]
        },
    }
]

WSGI_APPLICATION = "punkweb.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "punkweb",
        "USER": "punkweb",
        "PASSWORD": os.environ.get("DB_PASSWORD", "punkweb"),
        "HOST": "localhost",
        "PORT": "5432",
    }
}


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.MemcachedCache",
        "LOCATION": "127.0.0.1:11211",
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"

if DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, "server", "dev", "static")
    MEDIA_ROOT = os.path.join(BASE_DIR, "server", "dev", "media")
else:
    STATIC_ROOT = "/var/www/punkweb.us/static/"
    MEDIA_ROOT = "/var/www/punkweb.us/media/"

STATIC_DIR = os.path.join(BASE_DIR, "punkweb/static")

STATICFILES_DIRS = (STATIC_DIR,)

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
)

COMPRESS_OFFLINE = True
COMPRESS_PRECOMPILERS = (("text/x-scss", "django_libsass.SassCompiler"),)

CODEMIRROR_PATH = os.path.join(STATIC_URL, "punkweb", "codemirror")

# Logging
# The numeric values of logging levels are in the following table:
#
# CRITICAL    50
# ERROR       40
# WARNING     30
# INFO        20
# DEBUG       10
# NOTSET      0 [default]
#
# Messages which are less severe than the specified level will be ignored.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "filters": DEFAULT_LOGGING["filters"],
    "formatters": {
        "default": {
            "()": "logging.Formatter",
            "format": "[%(asctime)s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "debug": {
            "()": "logging.Formatter",
            "format": "[%(asctime)s] %(levelname)s - %(name)s: %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": "ERROR",
            "class": "logging.StreamHandler",
            "formatter": "default",
            "filters": ["require_debug_false"],
        },
        "debug-console": {
            "level": "INFO",  # DEBUG level here is *extremely* noisy
            "class": "logging.StreamHandler",
            "formatter": "debug",
            "filters": ["require_debug_true"],
        },
        "file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "default",
            "filename": "/var/log/punkweb/django.log",
            "maxBytes": 1000000,  # 1MB
            "delay": True,
        },
    },
    "loggers": {
        "": {
            "handlers": ["console", "debug-console", "file"],
            "level": "NOTSET",
            "propagate": False,
        },
        "django": {
            "handlers": ["console", "debug-console", "file"],
            "level": "NOTSET",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "debug-console", "file"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}


# Non default app configuration

# admin.site.site_header = 'Punk Web'

LOGIN_REDIRECT_URL = "/board/"

CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "punkweb_boards.rest.authentication.NoCSRFSessionAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 25,
}

THUMBNAIL_ALIASES = {
    "": {
        "avatar_no_crop": {"size": (200, 200), "crop": False},
        "avatar_small_no_crop": {"size": (100, 100), "crop": False},
        "avatar_smaller_no_crop": {"size": (50, 50), "crop": False},
        "avatar_smallest_no_crop": {"size": (25, 25), "crop": False},
        "avatar": {"size": (200, 200), "crop": True},
        "avatar_small": {"size": (100, 100), "crop": True},
        "avatar_smaller": {"size": (50, 50), "crop": True},
        "avatar_smallest": {"size": (25, 25), "crop": True},
    }
}

PUNKWEB_BOARDS = {"BOARD_NAME": "Punk Web", "CAPTCHAS_ENABLED": True}
